In JavaScript array variables, can store several pieces of data in one place.
We can start an array with an opening square bracket, end it with a closing
square bracket, and comma between each entry.

We can also nest arrays within each other in simple words we can place array
inside the array. It is also called multi-dimensional array.

We can access the data inside arrays using its indexes.
Array index are written in the same bracket notation that string use, except
that instead of specifing a character, they are specifying an entry in the array.
Like strings, array use zero-based indexing, so the first element in an array has
an index of 0.

Unlike strings, the entries of an arrays are mutable and can be changed freely,
even if the array was declared with const.

One way to think of a multi-dimensional array, is as an array of arrays. When you
use brackets to access your array, the first set of brackets refers to the entries
in the outermost(the first level) array, and each additional pair of brackets refers
to the next level of entries inside.

An easy way to append data to the end of an array is via the push() function.
.push() takes one or more parameters and "pushes" them onto the end of the array.

Another way to change the data in an array is with the .pop() function.
.pop() is used to pop the value off the end of the array. We can store this popped
off value by assigning it to a variable. In other words, .pop() removes the last
element from an array and returns that element.

pop() always removes the last element of an array. What if you want to remove the first?
That's where .shift() comes in. It works just like .pop(), except makes the first element
instead of the last.

We can't only take the element out of the array from the beginning of an array.
We can also add the element in the array in the beginning of the array, using
.unshift() it works exactly as .push().